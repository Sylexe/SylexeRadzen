@page "/fetchdata"
@inject IWebHostEnvironment Environment
@inject IJSRuntime JS
@using SylexeRadzen.SQLManagement.Services;
@inject ISylexeReportsServices _sylexeService
@using System.Text.Json;
@using Components
@inject DialogService DialogService

<PageTitle>Résultats</PageTitle>

<h1>Résultat de l'analyse</h1>

<div class="container">
    <div class="row">
        <div class="col-sm-12 col-lg-6 offset-lg-3 my-5">
            <RadzenChart>
                <RadzenDonutSeries Data="@VulnSeverity" CategoryProperty="Severity" ValueProperty="Numbers">
                    <ChildContent>
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </ChildContent>
                    <TitleTemplate>
                        <div class="rz-donut-content">
                            <div>Vuln.</div>
                        </div>
                    </TitleTemplate>
                </RadzenDonutSeries>
            </RadzenChart>
        </div>
    </div>
</div>

<p>Voici la liste des vulnérabilités actuellement mise en avant par Trivy :</p>

<RadzenCard>
    <RadzenDataGrid style="height: auto" @ref="grid" IsLoading="false" Count="@count" Data="@broute" LoadData="@LoadData" AllowSorting="true" AllowFiltering="false" AllowPaging="false" PagerHorizontalAlign="HorizontalAlign.Center" TItem="Vulnerabilities" ColumnWidth="200px">
        <Columns>
            <RadzenDataGridColumn TItem="Vulnerabilities" Property="VulnerabilityID" Filterable="false" Title="CVE" Frozen="true" Width="20px" TextAlign="TextAlign.Center"/>
            <RadzenDataGridColumn TItem="Vulnerabilities" Property="PkgName" Filterable="false" Title="Nom du Package" Frozen="true" Width="20px" TextAlign="TextAlign.Center"/>
            <RadzenDataGridColumn TItem="Vulnerabilities" Property="CVSS.nvd.V3Score" Filterable="false" Title="Score" Frozen="true" Width="20px" TextAlign="TextAlign.Center"/>
            <RadzenDataGridColumn TItem="Vulnerabilities" Title="Description" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center" >
                <Template Context="data">
                    <RadzenText TextStyle="TextStyle.Body2">@(data.Description)</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Vulnerabilities" Title="Criticité" Frozen="true" Sortable="false" Filterable="false" Width="20px" TextAlign="TextAlign.Center" >
                <Template Context="data">
                    @if (data.Severity == "CRITICAL")
                    {
                        <RadzenBadge BadgeStyle="BadgeStyle.Danger" Shade="Shade.Lighter" class="price-badge" Text="CRITIQUE"/>
                    } else if (data.Severity == "HIGH")
                    {
                        <RadzenBadge BadgeStyle="BadgeStyle.Warning" Shade="Shade.Lighter" class="price-badge" Text="HAUTE"/>
                    } else if (data.Severity == "MEDIUM")
                    {
                        <RadzenBadge BadgeStyle="BadgeStyle.Info" Shade="Shade.Lighter" class="price-badge" Text="MOYENNE"/>
                    } else if (data.Severity == "LOW")
                    {
                        <RadzenBadge BadgeStyle="BadgeStyle.Success" Shade="Shade.Lighter" class="price-badge" Text="FAIBLE"/>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Vulnerabilities" Title="Détails" Frozen="true" Sortable="false" Filterable="false" Width="30px" TextAlign="TextAlign.Center" >
                <Template Context="data">
                    <RadzenButton Click=@(args => ShowInlineDialog(@data.Description)) Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
                    <RadzenButton Click=@(args => ShowInlineDialog(@data.Description)) class="rz-ml-1" Text="NVD Link" ButtonStyle="ButtonStyle.Primary" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@if (@metadata == null)
{
    <p>Chargement...</p>
}
else
{
    <RadzenCard class="rz-mt-2">
        <RadzenButton Text="Exporter les données" Click="@DownloadJsonFile" />
    </RadzenCard>
}

<style>
.product-title {
    min-height: 72px;
    background-color: var(--rz-secondary-lighter);
}
.price-badge {
    font-size: 16px;
    font-weight: bold;
    line-height: 20px;
    padding: 8px;
}
</style>

@code {
    bool showDataLabels = true;
    List<Vulnerabilities> filteredBouhbouh;
    List<Vulnerabilities> bouhbouh;
    bool allowVirtualization = true;
    int count;
    bool isLoading = false;
    DataItem[] VulnSeverity;

    RadzenDataGrid<Vulnerabilities> grid;
    IEnumerable<Vulnerabilities> broute;
    
    IEnumerable<int> selectedIds;
    IEnumerable<int> orderIds;

    private async Task DownloadJsonFile()
    {
        var fileName = _sylexeService.GetPathOfJson();
        var path = Path.Combine(Environment.ContentRootPath, Environment.EnvironmentName, fileName);

        await using FileStream fs = new(path, FileMode.Open);

        using var streamRef = new DotNetStreamReference(stream: fs);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
    
    async Task ShowInlineDialog(String descVuln)
    {
        var result = await DialogService.OpenSideAsync<DialogSide>("Détails", new Dictionary<string, object>() {{"Desc", descVuln}}, options: new SideDialogOptions
        {
            Position = DialogPosition.Right
        });
    }
    

    private MetadataJson metadata = null;

    protected override async Task OnInitializedAsync()
    {
        var fileName = _sylexeService.GetPathOfJson();
            <!--var fileName = "aquasec-trivy_0.34.0-10-juillet-2023-11_20_09.json";-->
        var path = Path.Combine(Environment.ContentRootPath, Environment.EnvironmentName, fileName);

        await using FileStream fs = new(path, FileMode.Open);

        StreamReader reader = new StreamReader(fs);
        string fileContent = await reader.ReadToEndAsync();
        metadata = JsonSerializer.Deserialize<MetadataJson>(fileContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        broute = metadata.Results[0].Vulnerabilities.ToList();
        VulnSeverity = new DataItem[] {
            new DataItem
            {
                Severity = "CRITIQUE",
                Numbers = broute.Where(l => l.Severity == "CRITICAL").Count()
            },
            new DataItem
            {
                Severity = "HAUTE",
                Numbers = broute.Where(l => l.Severity == "HIGH").Count()
            },
            new DataItem
            {
                Severity = "MOYENNE",
                Numbers = broute.Where(l => l.Severity == "MEDIUM").Count()
            },
            new DataItem
            {
                Severity = "FAIBLE",
                Numbers = broute.Where(l => l.Severity == "LOW").Count()
            },
        };
    }
    
    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        var query = metadata.Results[0].Vulnerabilities.AsQueryable();

        count = query.Count();

        broute = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

        isLoading = false;
    }
    
    class DataItem
    {
        public string Severity { get; set; }
        public double Numbers { get; set; }
    }

    public class MetadataJson
    {
        public int SchemaVersion { get; set; }
        public string ArtifactName { get; set; }
        public string ArtifactType { get; set; }
        public Metadata Metadata { get; set; }
        public List<Results> Results { get; set; }

    }

    public class Metadata
    {
        public OS OS { get; set; }
        public string ImageID { get; set; }
        public string[] DiffIDs { get; set; }
        public string[] RepoTags { get; set; }
        public string[] RepoDigests { get; set; }
        public ImageConfig ImageConfig { get; set; }
    }

    public class OS
    {
        public string Family { get; set; }
        public string Name { get; set; }
    }

    public class ImageConfig
    {
        public string architecture { get; set; }
        public string created { get; set; }
        public History[] history { get; set; }
        public string os { get; set; }
        public Rootfs rootfs { get; set; }
        public Config config { get; set; }
    }

    public class History
    {
        public string created { get; set; }
        public string created_by { get; set; }
        public bool empty_layer { get; set; }
        public string comment { get; set; }
    }

    public class Rootfs
    {
        public string type { get; set; }
        public string[] diff_ids { get; set; }
    }

    public class Config
    {
        public string[] Entrypoint { get; set; }
        public string[] Env { get; set; }
        public Labels Labels { get; set; }
    }

    public class Labels
    {
        public string org_opencontainers_image_created { get; set; }
        public string org_opencontainers_image_description { get; set; }
        public string org_opencontainers_image_documentation { get; set; }
        public string org_opencontainers_image_revision { get; set; }
        public string org_opencontainers_image_source { get; set; }
        public string org_opencontainers_image_title { get; set; }
        public string org_opencontainers_image_url { get; set; }
    }

    public class Results
    {
        public String Target { get; set; }
        public String Class { get; set; }
        public String Type { get; set; }
        public List<Vulnerabilities> Vulnerabilities { get; set; }
    }

    public class Vulnerabilities
    {
        public String VulnerabilityID { get; set; }
        public String PkgName { get; set; }
        public String InstalledVersion { get; set; }
        public Layer Layer { get; set; }
        public String SeveritySource { get; set; }
        public String PrimaryURL { get; set; }
        public DataSource DataSource { get; set; }
        public String Title { get; set; }
        public String Description { get; set; }
        public String Severity { get; set; }
        public String[] CweIDs { get; set; }
        public CVSS CVSS { get; set; }
        public String[] References { get; set; }
        public String PublishedDate { get; set; }
        public String LastModifiedDate { get; set; }
    }

    public class Layer
    {
        public String Digest { get; set; }
        public String DiffID { get; set; }
    }

    public class DataSource
    {
        public String ID { get; set; }
        public String Name { get; set; }
        public String URL { get; set; }
    }

    public class CVSS
    {
        public nvd nvd { get; set; }
        public redhat redhat { get; set; }
    }

    public class nvd
    {
        public String V2Vector { get; set; }
        public String V3Vector { get; set; }
        public float V2Score { get; set; }
        public float V3Score { get; set; }
    }

    public class redhat
    {
        public String V3Vector { get; set; }
        public float V3Score { get; set; }
    }

}