@page "/counter"
@using System 
@using System.IO
@using System.Diagnostics
@using System.ComponentModel
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using SylexeRadzen.SQLManagement.Services;
@inject ILogger<Counter> Logger
@inject IWebHostEnvironment WebEnvironment
@inject ISylexeReportsServices _sylexeService
@inject NotificationService NotificationService

<PageTitle>Analyse</PageTitle>

<!--Faire des RadzenStack dans des Radzen card et mettre le texte dans un radzenCard-->

<RadzenCard class="p-0">
    <RadzenStack Orientation="@orientation" Gap="@gap" Reverse="@reverse" JustifyContent="@justifyContent" AlignItems="@alignItems" Style="height: 550px">
        <RadzenCard class="p-1 rz-background-color-info rz-color-on-info rz-text-align-center ma-16" style="height: 80%; width: 40%;">
            Nom Docker
        </RadzenCard>
        <RadzenCard class="p-1 rz-color-on-warning rz-black rz-text-align-center" style="height: 80%; width: 5%;">
            <RadzenCard class="p-1 rz-background-color-success rz-color-on-success rz-text-align-center" style="height: 10%; width: 100%;">
                <h2 style="border-color: #0a53be;border-radius: 10px">OU</h2>
            </RadzenCard>
            <RadzenCard class="p-1 rz-background-color-success rz-color-on-success rz-text-align-center" style="height: 90%; width: 100%;">
                                
            </RadzenCard>
        </RadzenCard>
        <RadzenCard class="p-1 rz-background-color-warning rz-color-on-warning rz-text-align-center" style="height: 80%; width: 40%;">
            C
        </RadzenCard>
    </RadzenStack>
</RadzenCard>

@if (isLoading)
{
        <p>Uploading...</p>
}
else
{
        <ul>
        @foreach (var file in loadedFiles)
        {
                    <li>
                        <ul>
                            <li>Name: @file.Name</li>
                            <li>Last modified: @file.LastModified.ToString()</li>
                            <li>Size (bytes): @file.Size</li>
                            <li>Content type: @file.ContentType</li>
                        </ul>
                    </li>
        }
        </ul>
}

@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    public string pathForDocker = "";
    public class Docker
    {
        public string Name { get; set; }
    }

    public Docker docker = new()
        {
            Name = "aquasec/trivy:0.34.0"
        };

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);

                var trustedFileNameForFileStorage = Path.GetRandomFileName();
                var path = Path.Combine(WebEnvironment.ContentRootPath,
                        WebEnvironment.EnvironmentName, "unsafe_uploads",
                        trustedFileNameForFileStorage);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }

        isLoading = false;
    }

    void ExecTrivyScan(string DockerScan)
    {
        Process serverSideProcess = new Process();
        //docker run -v C: \Users\lesgu\result:/ result aquasec / trivy:0.34.0 - d image - f json - o / result / rat.json aquasec / trivy:0.34.0
        serverSideProcess.StartInfo.FileName = Environment.GetEnvironmentVariable("docker");
        serverSideProcess.StartInfo.FileName = @"C:\Program Files\Docker\Docker\resources\bin\docker.exe";
        var path = Path.Combine(WebEnvironment.ContentRootPath, WebEnvironment.EnvironmentName);
        serverSideProcess.StartInfo.Arguments = String.Format("run -v {0}:/result aquasec/trivy:0.34.0 -d image -f json -o /result/rat.json {1}", pathForDocker, DockerScan);
        serverSideProcess.EnableRaisingEvents = true;
        serverSideProcess.StartInfo.UseShellExecute = true;
        serverSideProcess.Start();
    }
    
    Orientation orientation = Orientation.Horizontal;
    Orientation orientation2 = Orientation.Vertical;
    AlignItems alignItems = AlignItems.Center;
    JustifyContent justifyContent = JustifyContent.Center;
    FlexWrap wrap = FlexWrap.NoWrap;
    string gap = "10px";
    bool reverse;
    private void OnClick(string text)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Button Clicked", Detail = text });
    }

}