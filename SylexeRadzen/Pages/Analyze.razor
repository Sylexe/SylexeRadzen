@page "/Analyze"
@using System.IO
@using System.Diagnostics
@using System.Runtime.InteropServices
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using SylexeRadzen.SQLManagement.Services;
@using SylexeRadzen.SQLManagement.Definitions;
@using System.Text.RegularExpressions;
@inject DialogService DialogService
@inject ILogger<Analyze> Logger
@inject IWebHostEnvironment WebEnvironment
@inject ISylexeReportsServices _sylexeService
@inject NotificationService NotificationService

<PageTitle>Analyse</PageTitle>

<RadzenCard class="p-0">
    <RadzenStack Orientation="@orientation" Gap="@gap" Reverse="@reverse" JustifyContent="@justifyContent" AlignItems="@alignItems" Style="height: 300px">
        <!--Bloc gauche-->
        <RadzenCard class="p-1 rz-background-color-info rz-color-on-info rz-text-align-center ma-16" style="height: 80%; width: 40%;">
            <!--Titre-->
            <RadzenText TextStyle="TextStyle.H4" Style="color:white" class="rz-my-5">Nom du Docker</RadzenText>
            <!--Zone de texte-->
            <RadzenCard class="rz-background-color-primary-light rz-color-on-info rz-mx-auto" style="height: fit-content; width: 90%;">
                <RadzenTextBox class="rz-text-align-start rz-vertical-align-center" Placeholder="aquasec/trivy:0.34.0" Style="width: 90%;height: fit-content" @oninput=@(args => OnChange(args.Value.ToString())) />
            </RadzenCard>
            <br/>
            <!--Bouton Exécuter-->
            <RadzenColumn Style="text-align: center">
                <RadzenButton Shade="Shade.Darker" Click=@(args => ExecTrivyScan(docker.Name)) Text="Execute Scan" ButtonStyle="ButtonStyle.Secondary"/>
            </RadzenColumn>
        </RadzenCard>
        <!--Bloc milieu   rz-background-color-primary-light rz-border-radius-6 rz-black -->
        <!--<RadzenCard class="p-1 rz-text-align-center rz-border-white" style="height: 10%; width: 10%;"></RadzenCard>-->
        <RadzenText TextStyle="TextStyle.H3" TextAlign="TextAlign.Center" class="rz-mx-5">OU</RadzenText>
        
        <!--Bloc droit-->
        <RadzenCard class="p-1 rz-background-color-warning rz-color-on-warning rz-text-align-center ma-16" style="height: 80%; width: 40%;">
            <!--Titre-->
            <RadzenText TextStyle="TextStyle.H4" class="rz-my-5">Sélectionner DockerFile</RadzenText>
            <!--Zone de texte-->
            <RadzenCard class="rz-background-color-warning-light rz-color-on-info rz-mx-auto" style="height: fit-content; width: 90%;">
                <RadzenTextBox class="rz-text-align-start rz-vertical-align-center" Placeholder="aquasec/trivy:0.34.0" Style="width: 90%;height: fit-content" Disabled="true"/>
            </RadzenCard>
            <br/>
            <!--Bouton Exécuter-->
            <RadzenColumn Style="text-align: center">
                <RadzenButton Shade="Shade.Darker" Click=@(args => ExecTrivyScan(docker.Name)) Text="Execute Scan" ButtonStyle="ButtonStyle.Secondary" Disabled="true"/>
            </RadzenColumn>
        </RadzenCard>
    </RadzenStack>
    <div class="rz-m-12">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Visible=@anabar />
    </div>
</RadzenCard>

@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    public bool anabar = false;
    public bool isWindows;
    public bool isLinux;
    public bool isMacOS;
    private Process serverSideProcess;
    private String DockerScan;
    private String formattedDateTime;
    private String pathOfJson;
    private StreamReader reader;
    private String output;
    public String bouh;
    
    public class Docker
    {
        public string Name { get; set; }
    }

    public Docker docker = new()
        {
            Name = "aquasec/trivy:0.34.0"
        };

    void OnChange(string value)
    {
        docker.Name = value;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);

                var trustedFileNameForFileStorage = Path.GetRandomFileName();
                var path = Path.Combine(WebEnvironment.ContentRootPath,
                        WebEnvironment.EnvironmentName, "unsafe_uploads",
                        trustedFileNameForFileStorage);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }

        isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        isWindows = RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
        isLinux = RuntimeInformation.IsOSPlatform(OSPlatform.Linux);
        isMacOS = RuntimeInformation.IsOSPlatform(OSPlatform.OSX);
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    async Task ExecServerSideProcess(String DockerScan)
    {
        serverSideProcess = new Process();
        

            if (isWindows)
            {
                serverSideProcess.StartInfo.FileName = @"C:\Program Files\Docker\Docker\resources\bin\docker.exe";
            }
            else if (isLinux)
            {
                serverSideProcess.StartInfo.FileName = @"/bin/docker";
            }
            else if (isMacOS)
            {
                serverSideProcess.StartInfo.FileName = @"/bin/docker";
            }

            var path = Path.Combine(WebEnvironment.ContentRootPath, WebEnvironment.EnvironmentName);
            DateTime currentDateTime = DateTime.Now;
            formattedDateTime = currentDateTime.ToString("dd-MMMM-yyyy-HH:mm:ss");

            string input = (DockerScan + "-" + formattedDateTime);
            string temp = Regex.Replace(input, @"\/", "-");
            pathOfJson = Regex.Replace(temp, @":", "_");
            serverSideProcess.StartInfo.Arguments = String.Format("run -v {0}:/result aquasec/trivy:0.34.0 -d image -f json -o /result/{1}.json {2}", path, pathOfJson, DockerScan);
            serverSideProcess.EnableRaisingEvents = true;
            serverSideProcess.StartInfo.UseShellExecute = false;
            serverSideProcess.StartInfo.RedirectStandardOutput = true;
            serverSideProcess.Exited += new EventHandler(myProcess_Exited);
            serverSideProcess.Start();
            
            reader = serverSideProcess.StandardOutput;
            output = reader.ReadToEnd();

            bouh += output;

            Console.WriteLine(bouh);

            serverSideProcess.WaitForExit();
        

    }
    
    async Task ExecTrivyScan(string InputReceived)
    {
        anabar = true;
        DockerScan = InputReceived;
        ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Analyse", Detail = "Lancement de l'analyse...", Duration = 4000 });

        await Task.Run(() => ExecServerSideProcess(InputReceived));
    }
    
    private void myProcess_Exited(object sender, System.EventArgs e)
    {
        if (serverSideProcess.ExitCode == 0)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Succès", Detail = "Tout s'est bien déroulé, vous pouvez vous rendre sur la page Data.", Duration = 4000 });
            _sylexeService.AddCategoriesAsync(new SylexeReports
            {
                Name = DockerScan,
                Timestamp = formattedDateTime,
                Path = pathOfJson + ".json"
            });
            _sylexeService.SetPathOfJson(pathOfJson + ".json");
            anabar = false;
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Erreur", Detail = "L'éxécution s'est mal déroulé, merci de vérifier Docker", Duration = 4000 });
            anabar = false;
        }
    }

    Orientation orientation = Orientation.Horizontal;
    Orientation orientation2 = Orientation.Vertical;
    AlignItems alignItems = AlignItems.Center;
    JustifyContent justifyContent = JustifyContent.Center;
    FlexWrap wrap = FlexWrap.NoWrap;
    string gap = "10px";
    bool reverse;
}