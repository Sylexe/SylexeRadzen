@page "/Analyze"
@inject IJSRuntime JsRuntime
@using System 
@using System.IO
@using System.Diagnostics
@using System.ComponentModel
@using System.Runtime.InteropServices.JavaScript
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using SylexeRadzen.SQLManagement.Services;
@using SylexeRadzen.SQLManagement.Context;
@using SylexeRadzen.SQLManagement.Definitions;
@using System.Text.RegularExpressions;
@inject ILogger<Analyze> Logger
@inject IWebHostEnvironment WebEnvironment
@inject ISylexeReportsServices _sylexeService
@inject NotificationService NotificationService

<PageTitle>Analyse</PageTitle>

<RadzenCard class="p-0">
    <RadzenStack Orientation="@orientation" Gap="@gap" Reverse="@reverse" JustifyContent="@justifyContent" AlignItems="@alignItems" Style="height: 300px">
        <!--Bloc gauche-->
        <RadzenCard class="p-1 rz-background-color-info rz-color-on-info rz-text-align-center ma-16" style="height: 80%; width: 40%;">
            <!--Titre-->
            <RadzenText TextStyle="TextStyle.H4" class="rz-my-5">Nom Docker</RadzenText>
            <!--Zone de texte-->
            <RadzenCard class="rz-background-color-primary-light rz-color-on-info rz-mx-auto" style="height: fit-content; width: 90%;">
                <RadzenTextBox class="rz-text-align-start rz-vertical-align-center" Placeholder="aquasec/trivy:0.34.0" Style="width: 90%;height: fit-content"/>
            </RadzenCard>
            <br/>
            <!--Bouton Exécuter-->
            <RadzenColumn Style="text-align: center">
                <RadzenButton Shade="Shade.Darker" Click=@(args => ExecTrivyScan(docker.Name)) Text="Execute Scan" ButtonStyle="ButtonStyle.Secondary" />
            </RadzenColumn>
        </RadzenCard>
        <!--Bloc milieu   rz-background-color-primary-light rz-border-radius-6 rz-black -->
        <!--<RadzenCard class="p-1 rz-text-align-center rz-border-white" style="height: 10%; width: 10%;"></RadzenCard>-->
        <RadzenText TextStyle="TextStyle.H3" TextAlign="TextAlign.Center" class="rz-mx-5">OU</RadzenText>
        
        <!--Bloc droit-->
        <RadzenCard class="p-1 rz-background-color-warning rz-color-on-warning rz-text-align-center ma-16" style="height: 80%; width: 40%;">
            <!--Titre-->
            <RadzenText TextStyle="TextStyle.H4" class="rz-my-5">Sélectionner DockerFile</RadzenText>
            <!--Zone de texte-->
            <RadzenCard class="rz-background-color-warning-light rz-color-on-info rz-mx-auto" style="height: fit-content; width: 90%;">
                <RadzenTextBox class="rz-text-align-start rz-vertical-align-center" Placeholder="aquasec/trivy:0.34.0" Style="width: 90%;height: fit-content"/>
            </RadzenCard>
            <br/>
            <!--Bouton Exécuter-->
            <RadzenColumn Style="text-align: center">
                <RadzenButton Shade="Shade.Darker" Click=@(args => ExecTrivyScan(docker.Name)) Text="Execute Scan" ButtonStyle="ButtonStyle.Secondary" />
            </RadzenColumn>
        </RadzenCard>
    </RadzenStack>
</RadzenCard>
-->
<input @bind-value="@docker.Name" @bind-value:event="oninput" />
<input @bind-value="@pathForDocker" @bind-value:event="oninput" />

<p>
    <label>
        Max file size:
        <input type="number" @bind="maxFileSize" />
    </label>
</p>

<p>
    <label>
        Max allowed files:
        <input type="number" @bind="maxAllowedFiles" />
    </label>
</p>

<p>
    <label>
        Upload up to @maxAllowedFiles of up to @maxFileSize bytes:
        <InputFile OnChange="@LoadFiles" multiple />
    </label>
</p>

<button @onclick="@(() => ExecTrivyScan(docker.Name))">Execute Scan</button>


@if (isLoading)
{
        <p>Uploading...</p>
}
else
{
        <ul>
        @foreach (var file in loadedFiles)
        {
                    <li>
                        <ul>
                            <li>Name: @file.Name</li>
                            <li>Last modified: @file.LastModified.ToString()</li>
                            <li>Size (bytes): @file.Size</li>
                            <li>Content type: @file.ContentType</li>
                        </ul>
                    </li>
        }
        </ul>
}

@code {
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    public string pathForDocker = "";
    public class Docker
    {
        public string Name { get; set; }
    }

    public Docker docker = new()
        {
            Name = "aquasec/trivy:0.34.0"
        };

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);

                var trustedFileNameForFileStorage = Path.GetRandomFileName();
                var path = Path.Combine(WebEnvironment.ContentRootPath,
                        WebEnvironment.EnvironmentName, "unsafe_uploads",
                        trustedFileNameForFileStorage);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }

        isLoading = false;
    }   

    void ExecTrivyScan(string DockerScan)
    {
        Process serverSideProcess = new Process();
        //docker run -v C: \Users\lesgu\result:/ result aquasec / trivy:0.34.0 - d image - f json - o / result / rat.json aquasec / trivy:0.34.0
        serverSideProcess.StartInfo.FileName = Environment.GetEnvironmentVariable("docker");
        serverSideProcess.StartInfo.FileName = @"C:\Program Files\Docker\Docker\resources\bin\docker.exe";
        var path = Path.Combine(WebEnvironment.ContentRootPath, WebEnvironment.EnvironmentName);
        DateTime currentDateTime = DateTime.Now;
        string formattedDateTime = currentDateTime.ToString("dd-MMMM-yyyy-HH:mm:ss");
        
        string input = (DockerScan + "-" + formattedDateTime);
        string temp = Regex.Replace(input, @"\/", "-");
        string pathOfJson = Regex.Replace(temp, @":", "_");
        
        serverSideProcess.StartInfo.Arguments = String.Format("run -v {0}:/result aquasec/trivy:0.34.0 -d image -f json -o /result/{1}.json {2}", path, pathOfJson, DockerScan);
        serverSideProcess.EnableRaisingEvents = true;
        serverSideProcess.StartInfo.UseShellExecute = true;
        serverSideProcess.Start();
        
        _sylexeService.AddCategoriesAsync(new SylexeReports
            {
                Name = DockerScan,
                Timestamp = formattedDateTime,
                Path = pathOfJson+".json"
            });
        _sylexeService.SetPathOfJson(pathOfJson+".json");
    }

    Orientation orientation = Orientation.Horizontal;
    Orientation orientation2 = Orientation.Vertical;
    AlignItems alignItems = AlignItems.Center;
    JustifyContent justifyContent = JustifyContent.Center;
    FlexWrap wrap = FlexWrap.NoWrap;
    string gap = "10px";
    bool reverse;
    private void OnClick(string text)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Button Clicked", Detail = text });
    }
}