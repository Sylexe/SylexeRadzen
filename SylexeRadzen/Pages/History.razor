@page "/history"
@using SylexeRadzen.SQLManagement.Definitions
@using SylexeRadzen.SQLManagement.Services;
@inject ISylexeReportsServices _sylexeService
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager

<PageTitle>History</PageTitle>

<h1>Historique des analyses</h1>

<p>Voici l'historique des analyses éffecuté depuis la création de votre Instance Sylexe :</p>

<RadzenDataFilter class="rz-pb-2" @ref="dataFilter" Auto=true Data="@reports" TItem="SylexeReports" ViewChanged=@(view => filteredOrders = view)>
    <Properties>
        <RadzenDataFilterProperty TItem="SylexeReports" Property="Name" Title="Nom" />
        <RadzenDataFilterProperty TItem="SylexeReports" Property="Timestamp" Title="Date" />
    </Properties>
</RadzenDataFilter>

<RadzenCard>
    <RadzenDataGrid style="height: auto" @ref="grid" IsLoading="false" Count="@count" Data="@(filteredOrders ?? reports)" LoadData="@LoadData" AllowSorting="true" AllowFiltering="false" AllowPaging="false" PagerHorizontalAlign="HorizontalAlign.Center" TItem="SylexeReports" ColumnWidth="200px">
        <Columns>
            <RadzenDataGridColumn TItem="SylexeReports" Property="Name" Filterable="false" Title="Nom" Frozen="true" Width="20px" TextAlign="TextAlign.Center"/>
            <RadzenDataGridColumn TItem="SylexeReports" Property="Timestamp" Filterable="false" Title="Date" Frozen="true" Width="20px" TextAlign="TextAlign.Center"/>
            <RadzenDataGridColumn TItem="SylexeReports" Title="Résultats" Frozen="true" Sortable="false" Filterable="false" Width="20px" TextAlign="TextAlign.Center" >
                <Template Context="data">
                    <RadzenButton Click=@(args => OnClick(data)) Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

<style>
.product-title {
    background-color: var(--rz-secondary-lighter);
}
.price-badge {
    font-size: 16px;
    font-weight: bold;
    line-height: 20px;
    padding: 8px;
}
</style>

@code {
    bool allowVirtualization = true;
    bool isLoading = false;
    int count;
    RadzenDataGrid<SylexeReports> grid;
    RadzenDataFilter<SylexeReports> dataFilter;
    IQueryable<SylexeReports> filteredOrders;
    
    IEnumerable<SylexeReports> reports;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        reports = await _sylexeService.GetCategoriesAsync();
    }
    
    private void OnClick(SylexeReports report)
    {
        _sylexeService.SetPathOfJson(report.Path);
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Fichier chargé", Detail = $"Vous avez sélectionné {report.Name}"});
        NavigationManager.NavigateTo("/FetchData");
    }
    
    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        var query = await _sylexeService.GetCategoriesAsync();

        count = query.Count();

        reports = query.Skip(args.Skip.Value).Take(args.Top.Value).AsQueryable().ToList();

        isLoading = false;
    }
}
